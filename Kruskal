package Daa;

import java.util.*;

class Kruskal {

static class Edge implements Comparable<Edge> 

    {

        int src, dest, weight;

        Edge(int src, int dest, int weight) 

        {

            this.src = src;

            this.dest = dest;

            this.weight = weight;

        }
@Override

        public int compareTo(Edge other) 

        {

            return Integer.compare(this.weight, other.weight);

        }

    }



    static int find(int[] parent, int vertex) 

    {

        if (parent[vertex] != vertex) 

        {

            parent[vertex] = find(parent, parent[vertex]); // Path compression

        }

        return parent[vertex];

    }



    static void union(int[] parent, int[] rank, int u, int v) 

    {

        int rootU = find(parent, u);

        int rootV = find(parent, v);



        if (rootU != rootV) 

        {

            if (rank[rootU] < rank[rootV]) 

            {

                parent[rootU] = rootV;

            }

            else if (rank[rootU] > rank[rootV]) 

            {

                parent[rootV] = rootU;

            } 

            else 

            {   parent[rootV] = rootU;

                rank[rootU]++;

            }

        }

    }



    public static void kruskalMST(int vertices, List<Edge> edges) 

    {

        Collections.sort(edges); // Sort edges by weight



        int[] parent = new int[vertices];

        int[] rank = new int[vertices];

        for (int i = 0; i < vertices; i++) 

        {

            parent[i] = i; // Initialize each vertex as its own parent

        }



        int mstWeight = 0;

        List<Edge> mst = new ArrayList<>();



        for (Edge edge : edges) 

        {

            if (find(parent, edge.src) != find(parent, edge.dest)) 

            {

                union(parent, rank, edge.src, edge.dest);

                mst.add(edge);

                mstWeight += edge.weight;

            }

            if (mst.size() == vertices - 1) break; // MST is complete

        }



        if (mst.size() == vertices - 1) 

        {

            System.out.println("Minimum Spanning Tree:");

            for (Edge edge : mst) 

            {

                System.out.println(edge.src + " - " + edge.dest + " : " + edge.weight);

            }

            System.out.println("Total weight of MST: " + mstWeight);

        } else {

            System.out.println("Graph is disconnected, no MST possible.");

        }

    }



    public static void main(String[] args) 

    {

        Scanner sc = new Scanner(System.in);



        System.out.println("Enter the number of vertices:");

        int vertices = sc.nextInt();



        System.out.println("Enter the number of edges:");

        int edgeCount = sc.nextInt();



        List<Edge> edges = new ArrayList<>();

        System.out.println("Enter edges (src, dest, weight):");

        

        for (int i = 0; i < edgeCount; i++) 

        {

            int src = sc.nextInt();

            int dest = sc.nextInt();

            int weight = sc.nextInt();

            edges.add(new Edge(src, dest, weight));

        }



        kruskalMST(vertices, edges);

    }

}



