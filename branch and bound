package UIT833;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Node {
    int level;
    int sum;
    List<Integer> subset;

    Node(int level, int sum, List<Integer> subset) {
        this.level = level;
        this.sum = sum;
        this.subset = new ArrayList<>(subset);
    }
}

public class SumOfSubsetsBranchBound {

    static void sumOfSubsets(int[] weights, int targetSum) {
        List<Node> queue = new ArrayList<>();
        Node root = new Node(-1, 0, new ArrayList<>());
        queue.add(root);

        boolean found = false;

        while (!queue.isEmpty()) {
            Node currentNode = queue.remove(0);

            // If the current sum matches the target, print the subset
            if (currentNode.sum == targetSum) {
                System.out.println("Subset found: " + currentNode.subset);
                found = true;
                continue; // Explore other possibilities
            }

            // Add child nodes (next level) if within bounds
            int nextLevel = currentNode.level + 1;
            if (nextLevel < weights.length) {
                // Include the next weight
                List<Integer> subsetWithNext = new ArrayList<>(currentNode.subset);
                subsetWithNext.add(weights[nextLevel]);
                int newSum = currentNode.sum + weights[nextLevel];

                // Add child node if sum <= target
                if (newSum <= targetSum) {
                    queue.add(new Node(nextLevel, newSum, subsetWithNext));
                }

                // Exclude the next weight
                queue.add(new Node(nextLevel, currentNode.sum, currentNode.subset));
            }
        }

        if (!found) {
            System.out.println("No subset with the given sum found.");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of weights: ");
        int n = scanner.nextInt();

        int[] weights = new int[n];
        System.out.println("Enter the weights:");
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }

        // Input target sum
        System.out.print("Enter the target sum: ");
        int targetSum = scanner.nextInt();

        // Display inputs
        System.out.println("\nWeights: " + java.util.Arrays.toString(weights));
        System.out.println("Target Sum: " + targetSum);

        sumOfSubsets(weights, targetSum);

        scanner.close();
    }
}






package UIT833;

import java.util.*;

public class TSPBranchAndBound {

    static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of cities: ");

        int n = scanner.nextInt();

        int[][] costMatrix = new int[n][n];

        System.out.println("Enter the cost matrix (use " + INF + " for no direct path):");

        for (int i = 0; i < n; i++) {

            for (int j = 0; j < n; j++) {

                costMatrix[i][j] = scanner.nextInt();

            }

        }

        System.out.println("Minimum cost of the tour: " + tsp(costMatrix, n));

    }

    static class Node implements Comparable<Node> {

        int level;

        int currentCity;

        int cost;

        int bound;

        List<Integer> path;

        public Node(int level, int currentCity, int cost, int bound, List<Integer> path) {

            this.level = level;

            this.currentCity = currentCity;

            this.cost = cost;

            this.bound = bound;

            this.path = new ArrayList<>(path);

        }

        @Override

        public int compareTo(Node o) {

            return Integer.compare(this.bound, o.bound);

        }

    }

    private static int tsp(int[][] costMatrix, int n) {

        PriorityQueue<Node> pq = new PriorityQueue<>();

        List<Integer> initialPath = new ArrayList<>();

        initialPath.add(0);

        int initialBound = calculateBound(costMatrix, n, initialPath);

        pq.add(new Node(0, 0, 0, initialBound, initialPath));

int minCost = INF;

        while (!pq.isEmpty()) {

            Node currentNode = pq.poll();

            if (currentNode.bound < minCost) {

                if (currentNode.level == n - 1) {

                    // All cities are visited, close the tour

                    int finalCost = currentNode.cost + costMatrix[currentNode.currentCity][0];

                    if (finalCost < minCost) {

                        minCost = finalCost;

                    }

                } else {

                    for (int i = 0; i < n; i++) {

                        if (!currentNode.path.contains(i) && costMatrix[currentNode.currentCity][i] != INF) {

                            List<Integer> newPath = new ArrayList<>(currentNode.path);

                            newPath.add(i);



                            int newCost = currentNode.cost + costMatrix[currentNode.currentCity][i];

                            int newBound = calculateBound(costMatrix, n, newPath);

                            if (newBound < minCost) {

                                pq.add(new Node(currentNode.level + 1, i, newCost, newBound, newPath));

                            }

                        }

                    }

                }

            }

        }

        return minCost;

    }
private static int calculateBound(int[][] costMatrix, int n, List<Integer> path) {

        int bound = 0;

        boolean[] visited = new boolean[n];

        for (int city : path) {

            visited[city] = true;

        }
 // Add the outgoing edges for visited cities

        for (int i = 0; i < path.size() - 1; i++) {

            int from = path.get(i);

            int to = path.get(i + 1);

            bound += costMatrix[from][to];

        }
  // Add the minimum edge for unvisited cities

        for (int i = 0; i < n; i++) {

            if (!visited[i]) {

                int minEdge = INF;

                for (int j = 0; j < n; j++) {

                    if (i != j && costMatrix[i][j] < minEdge) {

                        minEdge = costMatrix[i][j];

                    }

                }

                bound += minEdge;

            }

        }
  return bound;

    }

}

